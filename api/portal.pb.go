// Code generated by protoc-gen-go.
// source: api/portal.proto
// DO NOT EDIT!

/*
Package portal is a generated protocol buffer package.

It is generated from these files:
	api/portal.proto

It has these top-level messages:
	FileInfo
	PutFrame
	PutResponse
	GetRequest
	GetFrame
*/
package portal

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.ProtoPackageIsVersion1

type SessionStateType int32

const (
	SessionStateType_WAIT   SessionStateType = 0
	SessionStateType_ACTIVE SessionStateType = 1
)

var SessionStateType_name = map[int32]string{
	0: "WAIT",
	1: "ACTIVE",
}
var SessionStateType_value = map[string]int32{
	"WAIT":   0,
	"ACTIVE": 1,
}

func (x SessionStateType) String() string {
	return proto.EnumName(SessionStateType_name, int32(x))
}
func (SessionStateType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type FrameType int32

const (
	FrameType_HEADER FrameType = 0
	FrameType_CHUNK  FrameType = 1
)

var FrameType_name = map[int32]string{
	0: "HEADER",
	1: "CHUNK",
}
var FrameType_value = map[string]int32{
	"HEADER": 0,
	"CHUNK":  1,
}

func (x FrameType) String() string {
	return proto.EnumName(FrameType_name, int32(x))
}
func (FrameType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type FileInfo struct {
	Path     string `protobuf:"bytes,1,opt,name=path" json:"path,omitempty"`
	Size     int64  `protobuf:"varint,2,opt,name=size" json:"size,omitempty"`
	Mode     uint32 `protobuf:"varint,3,opt,name=mode" json:"mode,omitempty"`
	Mimetype string `protobuf:"bytes,4,opt,name=mimetype" json:"mimetype,omitempty"`
	IsDir    bool   `protobuf:"varint,5,opt,name=isDir" json:"isDir,omitempty"`
}

func (m *FileInfo) Reset()                    { *m = FileInfo{} }
func (m *FileInfo) String() string            { return proto.CompactTextString(m) }
func (*FileInfo) ProtoMessage()               {}
func (*FileInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type PutFrame struct {
	Type FrameType `protobuf:"varint,1,opt,name=type,enum=portal.FrameType" json:"type,omitempty"`
	Id   int64     `protobuf:"varint,2,opt,name=id" json:"id,omitempty"`
	// type = HEADER
	FileInfo *FileInfo `protobuf:"bytes,3,opt,name=fileInfo" json:"fileInfo,omitempty"`
	// type = CHUNK
	Data []byte `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *PutFrame) Reset()                    { *m = PutFrame{} }
func (m *PutFrame) String() string            { return proto.CompactTextString(m) }
func (*PutFrame) ProtoMessage()               {}
func (*PutFrame) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *PutFrame) GetFileInfo() *FileInfo {
	if m != nil {
		return m.FileInfo
	}
	return nil
}

type PutResponse struct {
	Type SessionStateType `protobuf:"varint,1,opt,name=type,enum=portal.SessionStateType" json:"type,omitempty"`
	// type = WAIT
	Token string `protobuf:"bytes,2,opt,name=token" json:"token,omitempty"`
	// type = ACTIVE
	RemoteIP string `protobuf:"bytes,3,opt,name=remoteIP" json:"remoteIP,omitempty"`
}

func (m *PutResponse) Reset()                    { *m = PutResponse{} }
func (m *PutResponse) String() string            { return proto.CompactTextString(m) }
func (*PutResponse) ProtoMessage()               {}
func (*PutResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type GetRequest struct {
	Token string `protobuf:"bytes,1,opt,name=token" json:"token,omitempty"`
}

func (m *GetRequest) Reset()                    { *m = GetRequest{} }
func (m *GetRequest) String() string            { return proto.CompactTextString(m) }
func (*GetRequest) ProtoMessage()               {}
func (*GetRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type GetFrame struct {
	Type FrameType `protobuf:"varint,1,opt,name=type,enum=portal.FrameType" json:"type,omitempty"`
	Id   int64     `protobuf:"varint,2,opt,name=id" json:"id,omitempty"`
	// type = HEADER
	FileInfo *FileInfo `protobuf:"bytes,3,opt,name=fileInfo" json:"fileInfo,omitempty"`
	// type = CHUNK
	Data []byte `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *GetFrame) Reset()                    { *m = GetFrame{} }
func (m *GetFrame) String() string            { return proto.CompactTextString(m) }
func (*GetFrame) ProtoMessage()               {}
func (*GetFrame) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *GetFrame) GetFileInfo() *FileInfo {
	if m != nil {
		return m.FileInfo
	}
	return nil
}

func init() {
	proto.RegisterType((*FileInfo)(nil), "portal.FileInfo")
	proto.RegisterType((*PutFrame)(nil), "portal.PutFrame")
	proto.RegisterType((*PutResponse)(nil), "portal.PutResponse")
	proto.RegisterType((*GetRequest)(nil), "portal.GetRequest")
	proto.RegisterType((*GetFrame)(nil), "portal.GetFrame")
	proto.RegisterEnum("portal.SessionStateType", SessionStateType_name, SessionStateType_value)
	proto.RegisterEnum("portal.FrameType", FrameType_name, FrameType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Client API for Portal service

type PortalClient interface {
	Put(ctx context.Context, opts ...grpc.CallOption) (Portal_PutClient, error)
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (Portal_GetClient, error)
}

type portalClient struct {
	cc *grpc.ClientConn
}

func NewPortalClient(cc *grpc.ClientConn) PortalClient {
	return &portalClient{cc}
}

func (c *portalClient) Put(ctx context.Context, opts ...grpc.CallOption) (Portal_PutClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Portal_serviceDesc.Streams[0], c.cc, "/portal.Portal/Put", opts...)
	if err != nil {
		return nil, err
	}
	x := &portalPutClient{stream}
	return x, nil
}

type Portal_PutClient interface {
	Send(*PutFrame) error
	Recv() (*PutResponse, error)
	grpc.ClientStream
}

type portalPutClient struct {
	grpc.ClientStream
}

func (x *portalPutClient) Send(m *PutFrame) error {
	return x.ClientStream.SendMsg(m)
}

func (x *portalPutClient) Recv() (*PutResponse, error) {
	m := new(PutResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *portalClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (Portal_GetClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Portal_serviceDesc.Streams[1], c.cc, "/portal.Portal/Get", opts...)
	if err != nil {
		return nil, err
	}
	x := &portalGetClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Portal_GetClient interface {
	Recv() (*GetFrame, error)
	grpc.ClientStream
}

type portalGetClient struct {
	grpc.ClientStream
}

func (x *portalGetClient) Recv() (*GetFrame, error) {
	m := new(GetFrame)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Portal service

type PortalServer interface {
	Put(Portal_PutServer) error
	Get(*GetRequest, Portal_GetServer) error
}

func RegisterPortalServer(s *grpc.Server, srv PortalServer) {
	s.RegisterService(&_Portal_serviceDesc, srv)
}

func _Portal_Put_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PortalServer).Put(&portalPutServer{stream})
}

type Portal_PutServer interface {
	Send(*PutResponse) error
	Recv() (*PutFrame, error)
	grpc.ServerStream
}

type portalPutServer struct {
	grpc.ServerStream
}

func (x *portalPutServer) Send(m *PutResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *portalPutServer) Recv() (*PutFrame, error) {
	m := new(PutFrame)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Portal_Get_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PortalServer).Get(m, &portalGetServer{stream})
}

type Portal_GetServer interface {
	Send(*GetFrame) error
	grpc.ServerStream
}

type portalGetServer struct {
	grpc.ServerStream
}

func (x *portalGetServer) Send(m *GetFrame) error {
	return x.ServerStream.SendMsg(m)
}

var _Portal_serviceDesc = grpc.ServiceDesc{
	ServiceName: "portal.Portal",
	HandlerType: (*PortalServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Put",
			Handler:       _Portal_Put_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "Get",
			Handler:       _Portal_Get_Handler,
			ServerStreams: true,
		},
	},
}

var fileDescriptor0 = []byte{
	// 388 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xc4, 0x92, 0xdd, 0x6a, 0xe2, 0x40,
	0x14, 0xc7, 0x1d, 0x13, 0x43, 0x72, 0xdc, 0x95, 0xec, 0xec, 0x5e, 0x04, 0xaf, 0x96, 0x81, 0x05,
	0x91, 0x45, 0x25, 0xfb, 0x04, 0xe2, 0xc7, 0x1a, 0x16, 0x16, 0x19, 0x6d, 0x7b, 0x9d, 0xe2, 0x48,
	0x87, 0x9a, 0x4c, 0x9a, 0x8c, 0xd0, 0xf6, 0xb6, 0x2f, 0xde, 0xc9, 0x31, 0x89, 0xa1, 0x2f, 0xd0,
	0xbb, 0x73, 0xfe, 0xe7, 0xeb, 0x97, 0x7f, 0x06, 0xfc, 0x38, 0x93, 0xd3, 0x4c, 0xe5, 0x3a, 0x3e,
	0x4d, 0xb2, 0x5c, 0x69, 0x45, 0x9d, 0x4b, 0xc6, 0x9e, 0xc1, 0x5d, 0xcb, 0x93, 0x88, 0xd2, 0xa3,
	0xa2, 0x14, 0xec, 0x2c, 0xd6, 0x0f, 0x01, 0xf9, 0x49, 0x46, 0x1e, 0xc7, 0xb8, 0xd4, 0x0a, 0xf9,
	0x2a, 0x82, 0xae, 0xd1, 0x2c, 0x8e, 0x71, 0xa9, 0x25, 0xea, 0x20, 0x02, 0xcb, 0x68, 0x5f, 0x39,
	0xc6, 0x74, 0x08, 0x6e, 0x22, 0x13, 0xa1, 0x5f, 0x32, 0x11, 0xd8, 0x38, 0xdf, 0xe4, 0xf4, 0x07,
	0xf4, 0x64, 0xb1, 0x94, 0x79, 0xd0, 0x33, 0x05, 0x97, 0x5f, 0x12, 0xf6, 0x46, 0xc0, 0xdd, 0x9e,
	0xf5, 0x3a, 0x8f, 0x13, 0x41, 0x7f, 0x81, 0x8d, 0xa3, 0xe5, 0xe9, 0x41, 0xf8, 0x6d, 0x52, 0xb1,
	0x62, 0x71, 0x6f, 0x0a, 0x1c, 0xcb, 0x74, 0x00, 0x5d, 0x79, 0xa8, 0x58, 0x4c, 0x44, 0x7f, 0x83,
	0x7b, 0xac, 0xe8, 0x91, 0xa6, 0x1f, 0xfa, 0xcd, 0x68, 0xa5, 0xf3, 0xa6, 0xa3, 0xe4, 0x3e, 0xc4,
	0x3a, 0x46, 0xbe, 0x2f, 0x1c, 0x63, 0x96, 0x40, 0xdf, 0x40, 0x70, 0x51, 0x64, 0x2a, 0x2d, 0x84,
	0x59, 0xd8, 0xe6, 0x08, 0xea, 0x65, 0x3b, 0x51, 0x14, 0x52, 0xa5, 0x3b, 0x1d, 0xeb, 0x36, 0x8e,
	0xf9, 0x30, 0xad, 0x1e, 0x45, 0x8a, 0x44, 0x1e, 0xbf, 0x24, 0xa5, 0x15, 0xb9, 0x48, 0x94, 0x16,
	0xd1, 0x16, 0xa1, 0x8c, 0x15, 0x75, 0xce, 0x18, 0xc0, 0x5f, 0x61, 0xce, 0x3d, 0x9d, 0x45, 0xa1,
	0xaf, 0xf3, 0xa4, 0x35, 0x8f, 0xc6, 0x98, 0xa6, 0xcf, 0x35, 0x66, 0x3c, 0x02, 0xff, 0xe3, 0x57,
	0x53, 0x17, 0xec, 0xbb, 0x79, 0xb4, 0xf7, 0x3b, 0x14, 0xc0, 0x99, 0x2f, 0xf6, 0xd1, 0xed, 0xca,
	0x27, 0x63, 0x06, 0x5e, 0x83, 0x53, 0x16, 0x36, 0xab, 0xf9, 0x72, 0xc5, 0x4d, 0x93, 0x07, 0xbd,
	0xc5, 0xe6, 0xe6, 0xff, 0x3f, 0x9f, 0x84, 0x09, 0x38, 0x5b, 0x3c, 0x4f, 0x43, 0xb0, 0x8c, 0xe1,
	0xb4, 0xc1, 0xa9, 0x9f, 0xc0, 0xf0, 0x7b, 0x4b, 0xa9, 0xff, 0x07, 0xeb, 0x8c, 0xc8, 0x8c, 0xd0,
	0x29, 0x58, 0xc6, 0x10, 0x4a, 0xeb, 0x8e, 0xab, 0x85, 0x43, 0xbf, 0xa5, 0xe1, 0x1e, 0xd6, 0x99,
	0x91, 0x7b, 0x07, 0x1f, 0xf9, 0x9f, 0xf7, 0x00, 0x00, 0x00, 0xff, 0xff, 0x61, 0x8d, 0x7b, 0x91,
	0xf8, 0x02, 0x00, 0x00,
}
